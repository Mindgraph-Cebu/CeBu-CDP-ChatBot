from langchain.agents import create_sql_agent
from langchain.agents.agent_toolkits import SQLDatabaseToolkit
from langchain.sql_database import SQLDatabase
from langchain.agents import AgentExecutor
from langchain.agents.agent_types import AgentType
from langchain.llms import AzureOpenAI
from langchain.chat_models import AzureChatOpenAI
from langchain.prompts import PromptTemplate
import duckdb
import pandas as pd
from langchain.schema import HumanMessage

llm = AzureChatOpenAI(model="gpt-35-turbo",
                      openai_api_key="2dd4400d079a4fd49ddd2e864802522a",
                      azure_endpoint="https://genai-interns.openai.azure.com/",
                      deployment_name="genai",
                      openai_api_version="2023-07-01-preview",
                      temperature=0.7)



def airline_chat(text):
    airline_template = ("""
            **Airline Database Query Assistant**
            
            As a SQL Analyst, I'm here to help you with queries related to our airline's travel summary database.
                        
            **Greeting:**
            If your input is a greeting, I'll respond with: 'Hi there! I'm Customer360 AI. How may I assist you today? ðŸ˜Š'
                        
            **Goodbye:**
            If it's a goodbye message, I'll say: 'I trust I've addressed all your inquiries. Catch you later! ðŸ‘‹'
            
            **Database Information:**
            - **Passenger_name:** Names of the passengers (Object)
            - **Arrival_station:** Arrival station of the passenger (Object)
            - **Departure_station:** Departure station of the passenger (Object)
            - **Date_of_birth:** Date of birth of the passenger (DateTime)
            - **Gender:** Gender of the passenger (Object)
            - **Meals:** Meals consumed by the passenger (Object)
            - **Baggage:** Baggage consumed by the passenger (Object)
            - **Revenue:** Revenue generated by the passenger (float64)
            - **Country:** Country the passenger belongs to (Object)
            - **Unique_passenger_id:** Unique passenger ID (Object)
            - **Travel_Date:** Date traveled by the passenger (DateTime)
                        
            **Note:**
            If your questions are not related to the database, I'll respond with: 
            'I'm a bit unclear on your question. Could you ask about the database, please?'
            
            **Handling Unclear Queries:**
            If a question seems unclear or unrelated, I'll respond with: 
            'I'm sorry, but I'm having difficulty understanding your query. Please ensure your question is related to the database.'
                        
            **Your Questions:**
            {query}
                        
            *Please provide your queries, and I'll respond with relevant information.*
            """)

    
    uri = "sqlite:///data.db"

    db = SQLDatabase.from_uri(uri)
    # ,include_tables=['profile']

    toolkit = SQLDatabaseToolkit(db=db, llm=llm)

    result = final_output(toolkit,airline_template,text)

    # if "don't" in result and "know" in result:
    #     res = llm([HumanMessage(content=text)])
    #     res = str(res)
    #     res = res[9:-2]
    #     print(res)
    #     return res
    # else:
    return result



# def technician_chat(text):
#     airline_template = ("""
#             You are a SQL Analyst that is querying a database  .
            
           
            
#             Your job is to answer the following questions:
#             {query}
                        
#             The output should only only be in string format
#             """)
    
#     uri = "clickhouse://default:Neha@12345@20.213.35.159:8123/default"
           
#     # clickhouse_uri = "clickhouse://<username>:<password>@<host>:<port>/<database>"

#     db = SQLDatabase.from_uri(uri)
#     # ,include_tables=['profile']

#     toolkit = SQLDatabaseToolkit(db=db, llm=llm)

#     result = final_output(toolkit,airline_template,text)

#     # if "don't" in result and "know" in result:
#     #     res = llm([HumanMessage(content=text)])
#     #     res = str(res)
#     #     res = res[9:-2]
#     #     print(res)
#     #     return res
#     # else:
#     return result

    



def final_output(toolkit,template,text):
    agent= create_sql_agent(
        llm,
        toolkit=toolkit,
        verbose=True,
        agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
        handle_parsing_errors=True)
    
    prompt = PromptTemplate.from_template(template)
    
    result = agent.run(prompt.format(query=text))

    return result
